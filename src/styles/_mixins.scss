@mixin upto($media) {
  $max-width-bp: (map-get($bps, $media) or $media) - 1;

  @media only screen and (max-width: $max-width-bp) {
    @content;
  }
}

@mixin from($media) {
  $min-width-bp: (map-get($bps, $media) or $media);

  @media only screen and (min-width: $min-width-bp) {
    @content;
  }
}

@mixin between($media1, $media2) {
  $min-width-bp: (map-get($bps, $media1) or $media1);
  $max-width-bp: (map-get($bps, $media2) or $media2) - 1;

  @media only screen and (min-width: $min-width-bp) and (max-width: $max-width-bp) {
    @content;
  }
}

@mixin font($font, $suffix: '', $file: '') {
  $font-file: if($file != '', $file, if($suffix != '', $font + '-' + $suffix, $font));
  $font-path: '/static/fonts/' + $font-file;

  @font-face {
    font-family: $font;
    src: url($font-path + '.eot');
    src:
      url($font-path + '.eot?#iefix') format('embedded-opentype'),
      url($font-path + '.woff2') format('woff2'),
      url($font-path + '.woff') format('woff'),
      url($font-path + '.ttf') format('truetype'),
      url($font-path + '.svg#' + $font-file) format('svg');
    @content;
  }
}

@mixin box-shadow($x, $y, $blur, $spread, $rgba) {
  -webkit-box-shadow: $x $y $blur $spread $rgba;
  -moz-box-shadow: $x $y $blur $spread $rgba;
  box-shadow: $x $y $blur $spread $rgba;
}

@mixin no-drag() {
  -webkit-user-drag: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// pass in pixels values without suffix `px`
@mixin unitless-lh($line-height, $font-size) {
  line-height: $line-height / $font-size;
}

@mixin placeholder($color) {
  ::-webkit-input-placeholder { /* Edge */
    color: $color;
  }

  :-ms-input-placeholder { /* Internet Explorer 10-11 */
    color: $color;
  }

  ::placeholder {
    color: $color;
  }
}
